#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require_relative "../lib/mistral-ai"
require "optparse"

# Enhanced Mistral AI Chat Interface with MCP and Configuration Support
class MistralChatCLI
  def initialize
    @options = {}
    @config_manager = MistralAI::ChatConfig.new
  end

  def run
    parse_arguments
    validate_options
    setup_configuration
    start_chat_interface
  rescue MistralAI::ChatConfig::ConfigurationError => e
    puts "‚ùå Configuration Error: #{e.message}"
    exit(1)
  rescue Interrupt
    puts "\nüëã Goodbye!"
    exit(0)
  rescue => e
    puts "‚ùå Fatal error: #{e.message}"
    if ENV["DEBUG"] || @options[:debug]
      puts "\nBacktrace:"
      puts e.backtrace
    end
    exit(1)
  end

  private

  def parse_arguments
    OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [options]"
      opts.separator ""
      opts.separator "Enhanced Mistral AI Console Chat Interface"
      opts.separator ""
      opts.separator "Basic Options:"

      opts.on("-k", "--api-key KEY", "Mistral AI API key (required)") do |key|
        @options[:api_key] = key
      end

      opts.on("-m", "--model MODEL", "Model to use (default: mistral-small-latest)") do |model|
        @options[:model] = model
      end

      opts.separator ""
      opts.separator "MCP Options:"

      opts.on("--mcp", "Enable MCP mode") do
        @options[:mcp_mode] = true
      end

      opts.on("--mcp-servers SERVERS", "Comma-separated list of MCP server names") do |servers|
        @options[:mcp_servers] = servers
      end

      opts.on("--mcp-config FILE", "Path to MCP configuration file (JSON/YAML)") do |file|
        @options[:mcp_config_file] = file
      end

      opts.separator ""
      opts.separator "Prompt Options:"

      opts.on("--system-prompt FILE", "Path to system prompt file") do |file|
        @options[:system_prompt_file] = file
      end

      opts.separator ""
      opts.separator "Utility Options:"

      opts.on("--generate-samples [DIR]", "Generate sample configuration files") do |dir|
        @options[:generate_samples] = dir || "."
      end

      opts.on("--debug", "Enable debug mode") do
        @options[:debug] = true
      end

      opts.on("-h", "--help", "Show this help message") do
        puts opts
        puts
        puts "Examples:"
        puts "  Basic usage:"
        puts "    #{$0} --api-key your-api-key-here"
        puts ""
        puts "  With specific model:"
        puts "    #{$0} -k your-api-key -m mistral-large-latest"
        puts ""
        puts "  With MCP support:"
        puts "    #{$0} -k your-api-key --mcp --mcp-servers filesystem,web-search"
        puts ""
        puts "  With configuration files:"
        puts "    #{$0} -k your-api-key --mcp-config mcp_config.json --system-prompt system_prompt.txt"
        puts ""
        puts "  Generate sample files:"
        puts "    #{$0} --generate-samples"
        puts "    #{$0} --generate-samples ./config"
        puts ""
        puts "Environment Variables:"
        puts "  MISTRAL_API_KEY - API key (if not provided via --api-key)"
        exit
      end

      opts.separator ""
    end.parse!

    # Handle sample generation
    if @options[:generate_samples]
      puts "üõ†Ô∏è  Generating sample configuration files..."
      files = MistralAI::ChatConfig.generate_sample_files(@options[:generate_samples])
      puts "‚úÖ Sample files generated successfully!"
      puts ""
      puts "Next steps:"
      puts "1. Edit #{files[:mcp_config]} with your MCP server configurations"
      puts "2. Edit #{files[:system_prompt]} with your desired system prompt"
      puts "3. Run the chat with: #{$0} -k YOUR_API_KEY --mcp-config #{files[:mcp_config]} --system-prompt #{files[:system_prompt]}"
      exit(0)
    end
  end

  def validate_options
    # Check for API key from environment if not provided
    @options[:api_key] ||= ENV["MISTRAL_API_KEY"]

    unless @options[:api_key]
      puts "‚ùå Error: API key is required"
      puts "Please provide it via --api-key parameter or MISTRAL_API_KEY environment variable"
      puts ""
      puts "Usage: #{$0} --api-key your-api-key-here"
      puts "Or run: #{$0} --help for more options"
      exit(1)
    end

    # Set defaults
    @options[:model] ||= "mistral-small-latest"
    @options[:mcp_mode] ||= false

    # Validate file paths
    if @options[:mcp_config_file] && !File.exist?(@options[:mcp_config_file])
      puts "‚ùå Error: MCP configuration file not found: #{@options[:mcp_config_file]}"
      exit(1)
    end

    if @options[:system_prompt_file] && !File.exist?(@options[:system_prompt_file])
      puts "‚ùå Error: System prompt file not found: #{@options[:system_prompt_file]}"
      exit(1)
    end

    # Enable MCP mode if MCP-related options are provided
    if @options[:mcp_servers] || @options[:mcp_config_file]
      @options[:mcp_mode] = true
    end
  end

  def setup_configuration
    # Load MCP settings if provided
    mcp_settings = nil
    if @options[:mcp_config_file]
      puts "üìã Loading MCP configuration from #{@options[:mcp_config_file]}..."
      mcp_settings = @config_manager.load_mcp_settings(@options[:mcp_config_file])
      puts "‚úÖ MCP configuration loaded successfully"
    end

    # Load system prompt if provided
    system_prompt = nil
    if @options[:system_prompt_file]
      puts "üìù Loading system prompt from #{@options[:system_prompt_file]}..."
      system_prompt = @config_manager.load_system_prompt(@options[:system_prompt_file])
      puts "‚úÖ System prompt loaded successfully"
    end

    # Parse MCP servers
    mcp_servers = MistralAI::ChatConfig.parse_mcp_servers(@options[:mcp_servers])

    # Store processed configuration
    @processed_config = {
      api_key: @options[:api_key],
      model: @options[:model],
      mcp_mode: @options[:mcp_mode],
      mcp_servers: mcp_servers,
      mcp_settings: mcp_settings,
      system_prompt: system_prompt
    }

    # Debug output
    if @options[:debug]
      puts "\nüîç Debug Configuration:"
      puts "  API Key: #{@options[:api_key] ? '[SET]' : '[MISSING]'}"
      puts "  Model: #{@processed_config[:model]}"
      puts "  MCP Mode: #{@processed_config[:mcp_mode]}"
      puts "  MCP Servers: #{@processed_config[:mcp_servers].inspect}"
      puts "  MCP Settings: #{@processed_config[:mcp_settings] ? '[LOADED]' : '[NONE]'}"
      puts "  System Prompt: #{@processed_config[:system_prompt] ? '[LOADED]' : '[NONE]'}"
      puts ""
    end
  end

  def start_chat_interface
    puts "üöÄ Starting Mistral AI Chat Interface..."
    
    chat = MistralAI::ChatInterface.new(
      api_key: @processed_config[:api_key],
      model: @processed_config[:model],
      mcp_mode: @processed_config[:mcp_mode],
      mcp_servers: @processed_config[:mcp_servers],
      mcp_settings: @processed_config[:mcp_settings],
      system_prompt: @processed_config[:system_prompt]
    )
    
    chat.start
  end
end

# Main execution
if __FILE__ == $0
  cli = MistralChatCLI.new
  cli.run
end 